type User =
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type UpdateCallsAggregatedData = vec nat64;
type TransferResponse =
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest =
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type Transaction =
 record {
   buyer: AccountIdentifier__1;
   price: nat64;
   seller: principal;
   time: Time;
   token: TokenIdentifier__1;
 };
type TokenIndex__3 = nat32;
type TokenIndex__2 = nat32;
type TokenIndex__1 = nat32;
type TokenIndex = nat32;
type TokenIdentifier__3 = text;
type TokenIdentifier__2 = text;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Time__1 = int;
type Time = int;
type SubAccount__3 = vec nat8;
type SubAccount__2 = vec nat8;
type SubAccount__1 = vec nat8;
type SubAccount = vec nat8;
type Settlement =
 record {
   buyer: AccountIdentifier__1;
   marketplaceAddress: opt AccountIdentifier__1;
   price: nat64;
   seller: principal;
   subaccount: SubAccount__2;
 };
type SaleTransaction =
 record {
   buyer: AccountIdentifier__4;
   price: nat64;
   seller: principal;
   time: Time__1;
   tokens: vec TokenIndex__2;
 };
type SaleSettings =
 record {
   bulkPricing: vec record {
                      nat64;
                      nat64;
                    };
   price: nat64;
   remaining: nat;
   salePrice: nat64;
   sold: nat;
   startTime: Time__1;
   totalToSell: nat;
   whitelist: bool;
   whitelistTime: Time__1;
 };
type Sale =
 record {
   buyer: AccountIdentifier__4;
   expires: Time__1;
   price: nat64;
   subaccount: SubAccount__1;
   tokens: vec TokenIndex__2;
   whitelisted: bool;
 };
type Result_9 =
 variant {
   err: CommonError__2;
   ok: AccountIdentifier__6;
 };
type Result_8 =
 variant {
   err: CommonError__1;
   ok: record {
         AccountIdentifier__1;
         opt Listing;
       };
 };
type Result_7 =
 variant {
   err: CommonError__1;
   ok: AccountIdentifier__1;
 };
type Result_6 =
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Result_5 =
 variant {
   err: text;
   ok: record {
         AccountIdentifier__4;
         nat64;
       };
 };
type Result_4 =
 variant {
   err: text;
   ok;
 };
type Result_3 =
 variant {
   err: CommonError__1;
   ok;
 };
type Result_2 =
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type Result_1 =
 variant {
   err: CommonError;
   ok: vec TokenIndex;
 };
type Result =
 variant {
   err: CommonError;
   ok: vec record {
             TokenIndex;
             opt Listing;
             opt blob;
           };
 };
type NumericEntity =
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type MetricsGranularity =
 variant {
   daily;
   hourly;
 };
type Metadata__1 =
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Metadata =
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type Listing =
 record {
   locked: opt Time;
   marketplaceAddress: opt AccountIdentifier__1;
   price: nat64;
   seller: principal;
 };
type ListRequest =
 record {
   from_subaccount: opt SubAccount__2;
   marketplacePrincipal: opt principal;
   price: opt nat64;
   token: TokenIdentifier__1;
 };
type HttpStreamingStrategy = variant {
                               Callback:
                                record {
                                  callback: func () -> ();
                                  token: HttpStreamingCallbackToken;
                                };};
type HttpStreamingCallbackToken =
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt blob;
 };
type HttpStreamingCallbackResponse =
 record {
   body: blob;
   token: opt HttpStreamingCallbackToken;
 };
type HttpResponse =
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt HttpStreamingStrategy;
 };
type HttpRequest =
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HourlyMetricsData =
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type HeaderField =
 record {
   text;
   text;
 };
type GetMetricsParameters =
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type File =
 record {
   ctype: text;
   data: vec blob;
 };
type Extension = text;
type Disbursement =
 record {
   amount: nat64;
   fromSubaccount: SubAccount__3;
   to: AccountIdentifier__5;
   tokenIndex: TokenIndex__3;
 };
type DailyMetricsData =
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type CommonError__3 =
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError__2 =
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError__1 =
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError =
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CanisterMetricsData =
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
type Canister =
 service {
   acceptCycles: () -> ();
   addAsset: (Asset) -> (nat);
   airdropTokens: (nat) -> ();
   allSettlements: () -> (vec record {
                                TokenIndex__1;
                                Settlement;
                              }) query;
   availableCycles: () -> (nat) query;
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier__3) -> (Result_9) query;
   collectCanisterMetrics: () -> ();
   cronDisbursements: () -> ();
   cronFailedSales: () -> ();
   cronSalesSettlements: () -> ();
   cronSettlements: () -> ();
   details: (TokenIdentifier__1) -> (Result_8) query;
   extensions: () -> (vec Extension) query;
   failedSales: () ->
    (vec record {
           AccountIdentifier__4;
           SubAccount__1;
         }) query;
   getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
   getDisbursements: () -> (vec Disbursement) query;
   getMinter: () -> (principal) query;
   getRegistry: () -> (vec record {
                             TokenIndex;
                             AccountIdentifier__2;
                           }) query;
   getTokenToAssetMapping: () -> (vec record {
                                        TokenIndex;
                                        text;
                                      }) query;
   getTokens: () -> (vec record {
                           TokenIndex;
                           Metadata;
                         }) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_streaming_callback: (HttpStreamingCallbackToken) ->
    (HttpStreamingCallbackResponse) query;
   initCap: () -> (Result_4);
   initMint: () -> (Result_4);
   list: (ListRequest) -> (Result_3);
   listings: () -> (vec record {
                          TokenIndex__1;
                          Listing;
                          Metadata__1;
                        }) query;
   lock: (TokenIdentifier__1, nat64, AccountIdentifier__1, SubAccount__2) ->
    (Result_7);
   metadata: (TokenIdentifier__2) -> (Result_6) query;
   pendingCronJobs: () ->
    (record {
       disbursements: nat;
       failedSettlements: nat;
     }) query;
   reserve: (nat64, nat64, AccountIdentifier__4, SubAccount__1) -> (Result_5);
   retrieve: (AccountIdentifier__4) -> (Result_4);
   saleTransactions: () -> (vec SaleTransaction) query;
   salesSettings: (AccountIdentifier__3) -> (SaleSettings) query;
   salesSettlements: () -> (vec record {
                                  AccountIdentifier__4;
                                  Sale;
                                }) query;
   settle: (TokenIdentifier__1) -> (Result_3);
   settlements: () ->
    (vec record {
           TokenIndex__1;
           AccountIdentifier__1;
           nat64;
         }) query;
   shuffleAssets: () -> ();
   shuffleTokensForSale: () -> ();
   enableSale: () -> (nat);
   stats: () -> (nat64, nat64, nat64, nat64, nat, nat, nat) query;
   streamAsset: (nat, bool, blob) -> ();
   supply: () -> (Result_2) query;
   toAddress: (text, nat) -> (AccountIdentifier__3) query;
   tokens: (AccountIdentifier__2) -> (Result_1) query;
   tokens_ext: (AccountIdentifier__2) -> (Result) query;
   transactions: () -> (vec Transaction) query;
   transfer: (TransferRequest) -> (TransferResponse);
   updateThumb: (text, File) -> (opt nat);
 };
type Balance__1 = nat;
type BalanceResponse =
 variant {
   err: CommonError__3;
   ok: Balance;
 };
type BalanceRequest =
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type Asset =
 record {
   metadata: opt File;
   name: text;
   payload: File;
   thumbnail: opt File;
 };
type AccountIdentifier__6 = text;
type AccountIdentifier__5 = text;
type AccountIdentifier__4 = text;
type AccountIdentifier__3 = text;
type AccountIdentifier__2 = text;
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : (principal) -> Canister
